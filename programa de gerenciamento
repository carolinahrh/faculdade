import tkinter as tk
from tkinter import ttk
from tkinter import messagebox
import sqlite3


# Função para conectar ao banco de dados
def conectar_bd():
    conn = sqlite3.connect('gerenciamento_contratos.db')
    cursor = conn.cursor()
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS contratos (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        empresa TEXT NOT NULL,
        descricao TEXT NOT NULL,
        data_inicio TEXT NOT NULL,
        data_fim TEXT NOT NULL
    )
    ''')
    conn.commit()
    return conn, cursor


# Função para adicionar um novo contrato
def adicionar_contrato():
    empresa = entry_empresa.get()
    descricao = entry_descricao.get()
    data_inicio = entry_data_inicio.get()
    data_fim = entry_data_fim.get()

    if not empresa or not descricao or not data_inicio or not data_fim:
        messagebox.showwarning("Entrada inválida", "Todos os campos devem ser preenchidos!")
        return

    conn, cursor = conectar_bd()
    cursor.execute('''
    INSERT INTO contratos (empresa, descricao, data_inicio, data_fim)
    VALUES (?, ?, ?, ?)
    ''', (empresa, descricao, data_inicio, data_fim))
    conn.commit()
    conn.close()

    messagebox.showinfo("Sucesso", "Contrato adicionado com sucesso!")
    limpar_campos()


# Função para listar contratos cadastrados
def listar_contratos():
    conn, cursor = conectar_bd()
    cursor.execute('SELECT * FROM contratos')
    contratos = cursor.fetchall()
    conn.close()

    for item in treeview.get_children():
        treeview.delete(item)

    for contrato in contratos:
        treeview.insert("", "end", values=contrato)


# Função para excluir um contrato
def excluir_contrato():
    selected_item = treeview.selection()
    if not selected_item:
        messagebox.showwarning("Seleção inválida", "Selecione um contrato para excluir!")
        return

    contrato_id = treeview.item(selected_item)['values'][0]
    conn, cursor = conectar_bd()
    cursor.execute('DELETE FROM contratos WHERE id = ?', (contrato_id,))
    conn.commit()
    conn.close()

    messagebox.showinfo("Sucesso", "Contrato excluído com sucesso!")
    listar_contratos()


# Função para limpar os campos de entrada
def limpar_campos():
    entry_empresa.delete(0, tk.END)
    entry_descricao.delete(0, tk.END)
    entry_data_inicio.delete(0, tk.END)
    entry_data_fim.delete(0, tk.END)


# Configuração da interface gráfica
root = tk.Tk()
root.title("Gerenciamento de Contratos")

# Labels e entradas
tk.Label(root, text="Empresa").grid(row=0, column=0)
entry_empresa = tk.Entry(root)
entry_empresa.grid(row=0, column=1)

tk.Label(root, text="Descrição").grid(row=1, column=0)
entry_descricao = tk.Entry(root)
entry_descricao.grid(row=1, column=1)

tk.Label(root, text="Data de Início (AAAA-MM-DD)").grid(row=2, column=0)
entry_data_inicio = tk.Entry(root)
entry_data_inicio.grid(row=2, column=1)

tk.Label(root, text="Data de Fim (AAAA-MM-DD)").grid(row=3, column=0)
entry_data_fim = tk.Entry(root)
entry_data_fim.grid(row=3, column=1)

# Botões
btn_adicionar = tk.Button(root, text="Adicionar Contrato", command=adicionar_contrato)
btn_adicionar.grid(row=4, column=0, columnspan=2)

btn_listar = tk.Button(root, text="Listar Contratos", command=listar_contratos)
btn_listar.grid(row=5, column=0, columnspan=2)

btn_excluir = tk.Button(root, text="Excluir Contrato", command=excluir_contrato)
btn_excluir.grid(row=6, column=0, columnspan=2)

# Treeview para listar contratos
columns = ("ID", "Empresa", "Descrição", "Data Início", "Data Fim")
treeview = ttk.Treeview(root, columns=columns, show="headings")
treeview.grid(row=7, column=0, columnspan=2)

for col in columns:
    treeview.heading(col, text=col)

# Iniciar a interface gráfica
root.mainloop()
